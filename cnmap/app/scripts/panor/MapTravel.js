// Generated by CoffeeScript 1.7.1
(function() {
  var ITravelLayer, _ref;

  ITravelLayer = (function() {
    function ITravelLayer(opts) {
      var _ref;
      this.opts = opts;
      if (this.opts) {
        _ref = this.opts, this.ctx = _ref.ctx, this.staticCtx = _ref.staticCtx, this.map = _ref.map, this.travel = _ref.travel;
      }
      this.mapEventListener = window.cnmap.MapEventListener.factory();
    }

    ITravelLayer.prototype.initMap = function() {};

    ITravelLayer.prototype.calcSpotTime = function() {
      var spot, spotMinDate, _i, _j, _len, _len1, _ref, _ref1;
      if (this.travel) {
        _ref = this.travel.spots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          spot = _ref[_i];
          spot.photos.sort(function(a, b) {
            return a.create_time - b.create_time;
          });
          if (spot.time_start) {
            spot.spotDate = new Date(spot.time_start);
          }
          if (spot.spotDate) {
            if (!spotMinDate || spotMinDate > spot.spotDate) {
              spotMinDate = spot.spotDate;
            }
          }
        }
        this.travel.time_start = spotMinDate;
        _ref1 = this.travel.spots;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          spot = _ref1[_j];
          if (spot.spotDate) {
            spot.day = Math.ceil((spot.spotDate - spotMinDate) / (1000 * 60 * 60 * 24)) + 1;
          }
        }
        this.travel.spots.sort(function(a, b) {
          return a.day - b.day;
        });
        if (this.travel.spots.length) {
          return this.travel.time_end = this.travel.spots[this.travel.spots.length - 1].time_start;
        }
      }
    };

    ITravelLayer.prototype.setMap = function(map) {
      if (map) {
        this.map = map;
        return this.initMap();
      }
    };

    ITravelLayer.prototype.setTravel = function(travel) {
      var spot, _i, _len, _ref, _results;
      this.travel = travel;
      this.travel.spots.sort(function(a, b) {
        return a.id - b.id;
      });
      _ref = this.travel.spots;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        spot = _ref[_i];
        _results.push(spot.photos.sort(function(a, b) {
          return a.date_time - b.date_time;
        }));
      }
      return _results;
    };

    ITravelLayer.prototype.createLabel = function(photo) {};

    ITravelLayer.prototype.getLabelContent = function(photoOssKey) {
      return "<img src='" + this.staticCtx + "/" + photoOssKey + "@!panor-lg' style='border: 2px solid white; width: 34px; height: 34px;'>";
    };

    ITravelLayer.prototype.activePhoto = function(photo) {
      if (!this.mapEventListener.inMapView(photo.point.lat, photo.point.lng, this.map)) {
        this.mapEventListener.setCenter(this.map, photo.point.lat, photo.point.lng);
        return this.mapEventListener.setZoom(this.map, 18);
      } else {
        return this.mapEventListener.setCenter(this.map, photo.point.lat, photo.point.lng);
      }
    };

    ITravelLayer.prototype.createMarker = function() {};

    ITravelLayer.prototype.addSpot = function(spot) {
      return this.travel.spots.push(spot);
    };

    ITravelLayer.prototype.addPhoto = function(spot, photo) {
      spot.photos.push(photo);
      this.calcSpotTime();
      return this.updateSpotLine(spot);
    };

    ITravelLayer.prototype.removePhoto = function(photo, spot) {
      var p, _i, _len, _ref;
      if (spot) {
        spot.photos = (function() {
          var _i, _len, _ref, _results;
          _ref = spot.photos;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            if (p.id !== photo.id) {
              _results.push(p);
            }
          }
          return _results;
        })();
        this.updateSpotLine(spot);
      } else {
        _ref = this.travel.spots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          spot = _ref[_i];
          spot.photos = (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = spot.photos;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              p = _ref1[_j];
              if (p.id !== photo.id) {
                _results.push(p);
              }
            }
            return _results;
          })();
          this.updateSpotLine(spot);
        }
      }
      return this.calcSpotTime();
    };

    ITravelLayer.prototype.removeSpot = function(spot) {
      var sp;
      this.travel.spots = (function() {
        var _i, _len, _ref, _results;
        _ref = this.travel.spots;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sp = _ref[_i];
          if (sp.id !== spot.id) {
            _results.push(sp);
          }
        }
        return _results;
      }).call(this);
      this.calcSpotTime();
      return this.updateSpotLine(spot);
    };

    ITravelLayer.prototype.activeSpot = function(spotid) {
      var ispot, ne, photo, spot, sw, _i, _j, _len, _len1, _ref, _ref1;
      if (!angular.isObject(spotid)) {
        _ref = this.travel.spots;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ispot = _ref[_i];
          if (parseInt(ispot.id, 10) === parseInt(spotid, 10)) {
            spot = ispot;
            break;
          }
        }
      } else {
        spot = spotid;
      }
      if (spot.photos[0]) {
        sw = jQuery.extend({}, spot.photos[0].point);
        ne = jQuery.extend({}, spot.photos[0].point);
      }
      if (sw && ne) {
        _ref1 = spot.photos;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          photo = _ref1[_j];
          if (photo.point.lat < sw.lat) {
            sw.lat = photo.point.lat;
          }
          if (photo.point.lng < sw.lng) {
            sw.lng = photo.point.lng;
          }
          if (photo.point.lat > ne.lat) {
            ne.lat = photo.point.lat;
          }
          if (photo.point.lng > ne.lng) {
            ne.lng = photo.point.lng;
          }
        }
        return this.mapEventListener.setBounds(this.map, sw, ne);
      }
    };

    ITravelLayer.prototype.clearMap = function() {
      return this.mapEventListener.clearMap(this.map);
    };

    return ITravelLayer;

  })();

  window.cnmap = (_ref = window.cnmap) != null ? _ref : {};

  window.cnmap.ITravelLayer = ITravelLayer;

}).call(this);

//# sourceMappingURL=MapTravel.map

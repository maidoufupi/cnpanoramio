// Generated by CoffeeScript 1.8.0
(function() {
  var $window, MapService, instance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $window = window;

  MapService = (function(_super) {
    __extends(MapService, _super);

    function MapService(map) {
      this.map = map;
    }

    MapService.prototype.init = function(map, callback) {
      var createSearch, searchModuleLoaded, that;
      that = this;
      createSearch = function() {
        that.searchManager = new Microsoft.Maps.Search.SearchManager(map);
        if (callback) {
          return callback.apply(this.searchManager, [this.searchManager]);
        }
      };
      searchModuleLoaded = function() {
        return createSearch();
      };
      if (!Microsoft.Maps.Search) {
        return Microsoft.Maps.loadModule('Microsoft.Maps.Search', {
          callback: searchModuleLoaded
        });
      } else {
        return createSearch();
      }
    };

    MapService.prototype.getAddress = function(lat, lng, callback) {
      if (!this.geocoder) {
        this.init();
      }
      return this.geocoder.getLocation(new window.BMap.Point(lng, lat), function(result) {
        if (result) {
          return callback.apply(void 0, [result.address]);
        }
      });
    };

    MapService.prototype.getAddrPois = function(lat, lng, callback) {
      var deferred, errCallback, reverseGeocodeCallback, reverseGeocodeRequest;
      deferred = jQuery.Deferred();
      reverseGeocodeCallback = function(result, userData) {
        var address, addresses;
        addresses = {};
        if (result) {
          address = result.name;
          addresses[address] = {
            poiweight: result.matchConfidence,
            location: {
              lat: result.location.latitude,
              lng: result.location.longitude
            }
          };
          return deferred.resolve(addresses, result.name);
        }
      };
      errCallback = function(request) {
        return console.log('reverseGeocode error');
      };
      reverseGeocodeRequest = {
        location: new Microsoft.Maps.Location(lat, lng),
        count: 10,
        callback: reverseGeocodeCallback,
        errorCallback: errCallback
      };
      this.searchManager.reverseGeocode(reverseGeocodeRequest);
      return deferred.promise();
    };

    MapService.prototype.getLocation = function(address, callback) {
      if (!this.geocoder) {
        this.init();
      }
      return this.geocoder.getPoint(address, function(point) {
        if (point) {
          return callback.apply(void 0, [point]);
        }
      });
    };

    MapService.prototype.getLocPois = function(address) {
      var deferred, errCallback, geocodeCallback, geocodeRequest;
      deferred = jQuery.Deferred();
      geocodeCallback = function(geocodeResult, userData) {
        var addresses, lng, ne, result, sw, _i, _len, _ref;
        console.log(geocodeResult);
        console.log(userData);
        addresses = [];
        _ref = geocodeResult.results;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          address = {
            address: result.name,
            location: {
              lat: result.location.latitude,
              lng: result.location.longitude
            },
            similarity: result.matchConfidence
          };
          if (result.bestView) {
            sw = {
              lat: result.bestView.center.latitude - result.bestView.height / 2
            };
            lng = result.bestView.center.longitude - result.bestView.width / 2;
            if (lng < -179) {
              sw.lng = 180 + lng + 180;
            } else {
              sw.lng = lng;
            }
            ne = {
              lat: result.bestView.center.latitude + result.bestView.height / 2
            };
            lng = result.bestView.center.longitude + result.bestView.width / 2;
            if (lng > 180) {
              ne.lng = lng - 180 - 180;
            } else {
              ne.lng = lng;
            }
            address.bounds = {
              sw: sw,
              ne: ne
            };
          }
          addresses.push(address);
        }
        return deferred.resolve(addresses);
      };
      errCallback = function() {};
      geocodeRequest = {
        where: address,
        count: 10,
        callback: geocodeCallback,
        errorCallback: errCallback
      };
      this.searchManager.geocode(geocodeRequest);
      return deferred.promise();
    };

    return MapService;

  })(window.cnmap.IMapService);

  instance = void 0;

  MapService.factory = function() {
    if (!instance) {
      instance = new window.cnmap.MapService;
    }
    return instance;
  };

  window.cnmap = window.cnmap || {};

  window.cnmap.MapService = MapService;

}).call(this);

//# sourceMappingURL=MapServiceImpl.js.map

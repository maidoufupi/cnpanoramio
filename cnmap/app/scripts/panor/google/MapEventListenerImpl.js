// Generated by CoffeeScript 1.8.0
(function() {
  var $window, MapEventListener,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $window = window;

  MapEventListener = (function(_super) {
    __extends(MapEventListener, _super);

    function MapEventListener() {
      return MapEventListener.__super__.constructor.apply(this, arguments);
    }

    MapEventListener.prototype.addLocationHashListener = function(map, callback) {
      var MapListener, listeners;
      listeners = [];
      MapListener = function(e) {
        var point;
        point = this.getCenter();
        if (point) {
          return callback.apply(this, [point.lat(), point.lng(), this.getZoom()]);
        }
      };
      listeners.push(google.maps.event.addListener(map, "idle", MapListener));
      return listeners;
    };

    MapEventListener.prototype.addToolBar = function(map) {};

    MapEventListener.prototype.setCenter = function(map, lat, lng) {
      return map.setCenter(new google.maps.LatLng(lat, lng));
    };

    MapEventListener.prototype.setZoom = function(map, zoom) {
      return map.setZoom(zoom);
    };

    MapEventListener.prototype.setZoomAndCenter = function(map, zoom, lat, lng) {
      this.setCenter(map, lat, lng);
      return this.setZoom(map, Number(zoom));
    };

    MapEventListener.prototype.zoomIn = function(map) {
      return this.setZoom(map, map.getZoom() + 1);
    };

    MapEventListener.prototype.zoomOut = function(map) {
      return this.setZoom(map, map.getZoom() - 1);
    };

    MapEventListener.prototype.setBounds = function(map, sw, ne) {
      return map.fitBounds(new google.maps.LatLngBounds(new google.maps.LatLng(sw.lat, sw.lng), new google.maps.LatLng(ne.lat, ne.lng)));
    };

    MapEventListener.prototype.inMapView = function(lat, lng, map) {
      map = map || this.opts.map;
      return map.getBounds().contains(new google.maps.LatLng(lat, lng));
    };

    MapEventListener.prototype.pixelToPoint = function(map, pixel) {
      var bounds, ne, nw, nwPoint, point, proj, scale, sw;
      scale = Math.pow(2, map.getZoom());
      bounds = map.getBounds();
      sw = bounds.getSouthWest();
      ne = bounds.getNorthEast();
      nw = new google.maps.LatLng(ne.lat(), sw.lng());
      proj = map.getProjection();
      nwPoint = proj.fromLatLngToPoint(nw);
      point = proj.fromPointToLatLng(new google.maps.Point((nwPoint.x * scale + pixel.x) / scale, (nwPoint.y * scale + pixel.y) / scale));
      return {
        lat: point.lat(),
        lng: point.lng()
      };
    };

    MapEventListener.prototype.pointToPixel = function(map, point) {};

    MapEventListener.prototype.addMarker = function(map, lat, lng) {
      return new google.maps.Marker({
        map: map,
        position: new google.maps.LatLng(lat, lng)
      });
    };

    MapEventListener.prototype.createDraggableMarker = function(map, lat, lng) {
      return new google.maps.Marker({
        map: map,
        position: new google.maps.LatLng(lat, lng),
        draggable: true
      });
    };

    MapEventListener.prototype.activeMarker = function(marker) {
      if (marker) {
        marker.setIcon({
          url: "images/marker.png",
          size: new google.maps.Size(20, 30),
          anchor: new google.maps.Point(10, 30)
        });
        return marker.setZIndex(2);
      }
    };

    MapEventListener.prototype.deactiveMarker = function(marker) {
      if (marker) {
        marker.setIcon(null);
        return marker.setZIndex(1);
      }
    };

    MapEventListener.prototype.addMarkerActiveListener = function(marker, callback) {
      var ActiveListener;
      ActiveListener = function(e) {
        return callback.apply(marker, []);
      };
      google.maps.event.addListener(marker, "click", ActiveListener);
      google.maps.event.addListener(marker, "dragend", ActiveListener);
      return google.maps.event.addListener(marker, "rightclick", ActiveListener);
    };

    MapEventListener.prototype.addDragendListener = function(marker, callback) {
      return google.maps.event.addListener(marker, "dragend", function(e) {
        return callback.apply(marker, [e.latLng.lat(), e.latLng.lng()]);
      });
    };

    MapEventListener.prototype.removeMarker = function(marker) {
      return marker.setMap(null);
    };

    MapEventListener.prototype.addMapClickListener = function(map, callback) {
      return google.maps.event.addListener(map, "click", function(e) {
        return callback.apply(map, [e.latLng.lat(), e.latLng.lng()]);
      });
    };

    MapEventListener.prototype.setPosition = function(target, lat, lng) {
      return target.setPosition(new google.maps.LatLng(lat, lng));
    };

    MapEventListener.prototype.setMap = function(target, map) {
      return target.setMap(map);
    };

    return MapEventListener;

  })(window.cnmap.IMapEventListener);

  MapEventListener.factory = function() {
    return new cnmap.MapEventListener;
  };

  window.cnmap = window.cnmap || {};

  window.cnmap.MapEventListener = MapEventListener;

}).call(this);

//# sourceMappingURL=MapEventListenerImpl.js.map

// Generated by CoffeeScript 1.7.1
(function() {
  var TravelLayer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TravelLayer = (function(_super) {
    __extends(TravelLayer, _super);

    function TravelLayer() {
      return TravelLayer.__super__.constructor.apply(this, arguments);
    }

    TravelLayer.prototype.initMap = function(map) {
      var photo, point, spot, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      if (map) {
        this.map = map;
      }
      this.calcSpotTime();
      this.labels = [];
      point = [];
      if (this.travel) {
        _ref = this.travel.spots;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          spot = _ref[_i];
          _ref1 = spot.photos;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            photo = _ref1[_j];
            this.labels.push(this.createLabel(photo));
          }
          point = [];
          _ref2 = spot.photos;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            photo = _ref2[_k];
            point.push(this.createPoint(photo));
          }
          spot.polyline = new qq.maps.Polyline({
            map: this.map,
            path: point,
            strokeDashStyle: 'dash',
            strokeWeight: 5
          });
          _results.push(this.labels.push(spot.polyline));
        }
        return _results;
      }
    };

    TravelLayer.prototype.createPoint = function(photo) {
      return new qq.maps.LatLng(photo.point.lat, photo.point.lng);
    };

    TravelLayer.prototype.createLabel = function(photo) {
      var label, that;
      that = this;
      label = new qq.maps.Label({
        map: this.map,
        position: new qq.maps.LatLng(photo.point.lat, photo.point.lng),
        content: this.getLabelContent(photo.oss_key),
        style: {
          padding: 0,
          border: 0
        }
      });
      label.photoId = photo.id;
      if (this.opts.clickable) {
        qq.maps.event.addListener(label, 'click', function() {
          return jQuery(that).trigger("data_clicked", [this.photoId]);
        });
      }
      label.photoId = photo.id;
      label.setMap(this.map);
      return label;
    };

    TravelLayer.prototype.toggleSpotLine = function(spot, visible) {
      if (spot.polyline) {
        return spot.polyline.setVisible(visible);
      }
    };

    TravelLayer.prototype.updateSpotLine = function(spot) {
      var photo, point, _i, _len, _ref;
      point = [];
      _ref = spot.photos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        photo = _ref[_i];
        point.push(this.createPoint(photo));
      }
      if (spot.polyline) {
        return spot.polyline.setPath(point);
      } else {
        spot.polyline = new qq.maps.Polyline({
          map: this.map,
          path: point,
          strokeDashStyle: 'dash',
          strokeWeight: 5
        });
        return this.labels.push(spot.polyline);
      }
    };

    TravelLayer.prototype.clearMap = function() {
      $.each(this.labels, function(index, label) {
        label.setMap(null);
        return label.setVisible(false);
      });
      return this.labels = [];
    };

    return TravelLayer;

  })(window.cnmap.ITravelLayer);

  window.cnmap.TravelLayer = TravelLayer;

}).call(this);

//# sourceMappingURL=MapTravelImpl.map

// Generated by CoffeeScript 1.8.0
(function() {
  var TravelLayer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TravelLayer = (function(_super) {
    __extends(TravelLayer, _super);

    function TravelLayer() {
      return TravelLayer.__super__.constructor.apply(this, arguments);
    }

    TravelLayer.prototype.createPoint = function(photo) {
      return new qq.maps.LatLng(photo.point.lat, photo.point.lng);
    };

    TravelLayer.prototype.createMarker = function(photo) {
      var marker, that;
      that = this;
      marker = new qq.maps.Marker({
        icon: new qq.maps.MarkerImage("" + this.staticCtx + "/" + photo.oss_key + "@!panor-lg"),
        title: photo.title || '',
        map: this.map,
        position: new qq.maps.LatLng(photo.point.lat, photo.point.lng)
      });
      marker.photo = photo;
      if (this.opts.clickable) {
        qq.maps.event.addListener(marker, 'click', function() {
          return jQuery(that).trigger("data_clicked", [this.photo.id]);
        });
      }
      photo.marker = marker;
      this.labels.push(marker);
      return marker;
    };

    TravelLayer.prototype.createPolyline = function(points) {
      return new qq.maps.Polyline({
        map: this.map,
        path: points,
        strokeWeight: 2
      });
    };

    TravelLayer.prototype.setPolylinePath = function(polyline, points) {
      return polyline.setPath(points);
    };

    TravelLayer.prototype.removeMarker = function(photo) {
      if (photo.marker) {
        photo.marker.setMap(null);
        return delete photo.marker;
      }
    };

    TravelLayer.prototype.toggleSpotLine = function(spot, visible) {
      if (spot.polyline) {
        return spot.polyline.setVisible(visible);
      }
    };

    TravelLayer.prototype.spotEditable = function(spot, editable) {
      var editMarker, photo, that, _i, _len, _ref, _results;
      editable = !!editable;
      that = this;
      editMarker = function(marker) {
        if (marker) {
          marker.setDraggable(that.opts.editable && editable);
          if (that.opts.editable && editable) {
            return marker.dragListener = qq.maps.event.addListener(marker, 'dragend', function(e) {
              if (!this.photo.oPoint) {
                this.photo.oPoint = $.extend({}, this.photo.point);
              }
              this.photo.point.lat = e.latLng.lat;
              this.photo.point.lng = e.latLng.lng;
              that.updateSpotLine(spot);
              return $(that).trigger("spot.edited", [spot.id]);
            });
          } else if (marker.dragListener) {
            qq.maps.event.removeListener(marker.dragListener);
            return marker.dragListener = null;
          }
        }
      };
      _ref = spot.photos;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        photo = _ref[_i];
        _results.push(editMarker(photo.marker));
      }
      return _results;
    };

    TravelLayer.prototype.cancelSpotEdit = function(spot) {
      var cancelMarker, photo, _i, _len, _ref;
      cancelMarker = function(photo) {
        if (photo.oPoint) {
          photo.point = photo.oPoint;
          delete photo.oPoint;
        }
        if (photo.marker) {
          return photo.marker.setPosition(new qq.maps.LatLng(photo.point.lat, photo.point.lng));
        }
      };
      _ref = spot.photos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        photo = _ref[_i];
        cancelMarker(photo);
      }
      return this.updateSpotLine(spot);
    };

    TravelLayer.prototype.clearMap = function() {
      var overlay, _i, _len, _ref;
      _ref = this.labels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        overlay = _ref[_i];
        overlay.setMap(null);
        overlay.setVisible(false);
      }
      return this.labels = [];
    };

    return TravelLayer;

  })(window.cnmap.ITravelLayer);

  window.cnmap.TravelLayer = TravelLayer;

}).call(this);

//# sourceMappingURL=MapTravelImpl.js.map

// Generated by CoffeeScript 1.8.0
(function() {
  var $window, MapService, instance,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $window = window;

  MapService = (function(_super) {
    __extends(MapService, _super);

    function MapService(map) {
      this.map = map;
    }

    MapService.prototype.init = function(map, callback) {
      return this.geocoder = L.mapbox.geocoder('mapbox.places');
    };

    MapService.prototype.getAddress = function(lat, lng, callback) {
      if (!this.geocoder) {
        this.init();
      }
      return this.geocoder.getLocation(new window.BMap.Point(lng, lat), function(result) {
        if (result) {
          return callback.apply(void 0, [result.address]);
        }
      });
    };

    MapService.prototype.getAddrPois = function(lat, lng, callback) {
      var deferred;
      deferred = jQuery.Deferred();
      this.geocoder.reverseQuery({
        lat: lat,
        lng: lng
      }, function(err, data) {
        var address, addresses, feature, _i, _len, _ref;
        console.log(data);
        addresses = {};
        _ref = data.features;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          feature = _ref[_i];
          address = feature.place_name;
          addresses[address] = {
            poiweight: feature.relevance,
            location: {
              lat: feature.center[1],
              lng: feature.center[0]
            }
          };
        }
        if (data.features[0]) {
          return deferred.resolve(addresses, data.features[0].place_name);
        }
      });
      return deferred.promise();
    };

    MapService.prototype.getLocation = function(address, callback) {
      if (!this.geocoder) {
        this.init();
      }
      return this.geocoder.getPoint(address, function(point) {
        if (point) {
          return callback.apply(void 0, [point]);
        }
      });
    };

    MapService.prototype.getLocPois = function(address) {
      var deferred;
      deferred = jQuery.Deferred();
      this.geocoder.query(address, function(err, data) {
        var addresses, feature, _i, _len, _ref;
        console.log(data.results);
        addresses = [];
        _ref = data.results.features;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          feature = _ref[_i];
          address = {
            address: feature.place_name,
            location: {
              lat: feature.center[1],
              lng: feature.center[0]
            },
            bounds: {
              sw: {
                lat: feature.bbox[1],
                lng: feature.bbox[0]
              },
              ne: {
                lat: feature.bbox[3],
                lng: feature.bbox[2]
              }
            },
            similarity: feature.relevance
          };
          addresses.push(address);
        }
        return deferred.resolve(addresses);
      });
      return deferred.promise();
    };

    return MapService;

  })(window.cnmap.IMapService);

  instance = void 0;

  MapService.factory = function() {
    if (!instance) {
      instance = new window.cnmap.MapService;
    }
    return instance;
  };

  window.cnmap = window.cnmap || {};

  window.cnmap.MapService = MapService;

}).call(this);

//# sourceMappingURL=MapServiceImpl.js.map

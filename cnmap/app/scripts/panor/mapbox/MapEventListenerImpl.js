// Generated by CoffeeScript 1.8.0
(function() {
  var $window, MapEventListener,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $window = window;

  MapEventListener = (function(_super) {
    __extends(MapEventListener, _super);

    function MapEventListener() {
      return MapEventListener.__super__.constructor.apply(this, arguments);
    }

    MapEventListener.prototype.addLocationHashListener = function(map, callback) {
      var MapListener;
      MapListener = function(e) {
        var center;
        center = e.target.getCenter();
        return callback.apply(this, [center.lat, center.lng, e.target.getZoom()]);
      };
      map.on("moveend", MapListener);
      return map.on("zoomend", MapListener);
    };

    MapEventListener.prototype.addToolBar = function(map) {};

    MapEventListener.prototype.setCenter = function(map, lat, lng) {
      return map.setView([lat, lng]);
    };

    MapEventListener.prototype.setZoom = function(map, zoom) {
      return map.setZoom(zoom);
    };

    MapEventListener.prototype.setZoomAndCenter = function(map, zoom, lat, lng) {
      return map.setView([lat, lng], zoom);
    };

    MapEventListener.prototype.zoomIn = function(map) {
      return map.zoomIn();
    };

    MapEventListener.prototype.zoomOut = function(map) {
      return map.zoomOut();
    };

    MapEventListener.prototype.setBounds = function(map, sw, ne) {
      return map.fitBounds([[sw.lat, sw.lng], [ne.lat, ne.lng]]);
    };

    MapEventListener.prototype.inMapView = function(lat, lng, map) {
      map = map || this.opts.map;
      return map.getBounds().contains([lat, lng]);
    };

    MapEventListener.prototype.pixelToPoint = function(map, pixel) {
      return map.containerPointToLatLng(L.point(pixel.x, pixel.y));
    };

    MapEventListener.prototype.pointToPixel = function(map, point) {
      return map.latLngToContainerPoint([point.lat, point.lng]);
    };

    MapEventListener.prototype.addMarker = function(map, lat, lng) {
      return L.marker([lat, lng], {
        icon: L.mapbox.marker.icon({
          'marker-size': 'medium'
        })
      }).addTo(map);
    };

    MapEventListener.prototype.createDraggableMarker = function(map, lat, lng) {
      return L.marker([lat, lng], {
        draggable: true
      }).addTo(map);
    };

    MapEventListener.prototype.activeMarker = function(marker) {
      if (marker) {
        marker.setIcon(L.mapbox.marker.icon({
          'marker-size': 'large',
          'marker-symbol': 'camera',
          'marker-color': '#00bcd4'
        }));
        return marker.setZIndexOffset(2);
      }
    };

    MapEventListener.prototype.deactiveMarker = function(marker) {
      if (marker) {
        marker.setIcon(L.mapbox.marker.icon({
          'marker-size': 'medium'
        }));
        return marker.setZIndexOffset(1);
      }
    };

    MapEventListener.prototype.addMarkerActiveListener = function(marker, callback) {
      var ActiveListener;
      ActiveListener = function(e) {
        return callback.apply(marker, []);
      };
      marker.on('click', ActiveListener);
      marker.on('dblclick', ActiveListener);
      return marker.on('dragend', ActiveListener);
    };

    MapEventListener.prototype.addDragendListener = function(marker, callback) {
      return marker.on('dragend', function(e) {
        if (e.type === "dragend") {
          return callback.apply(marker, [e.target.getLatLng().lat, e.target.getLatLng().lng]);
        }
      });
    };

    MapEventListener.prototype.removeMarker = function(marker, map) {
      return map.removeLayer(marker);
    };

    MapEventListener.prototype.addMapClickListener = function(map, callback) {};

    MapEventListener.prototype.setPosition = function(target, lat, lng) {
      return target.setLatLng([lat, lng]);
    };

    MapEventListener.prototype.setMap = function(target, map) {
      return target.addTo(map);
    };

    return MapEventListener;

  })(window.cnmap.IMapEventListener);

  MapEventListener.factory = function() {
    return new cnmap.MapEventListener;
  };

  window.cnmap = window.cnmap || {};

  window.cnmap.MapEventListener = MapEventListener;

}).call(this);

//# sourceMappingURL=MapEventListenerImpl.js.map

<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- <context:property-placeholder /> -->

	<http pattern="/images/**" security="none"
		xmlns="http://www.springframework.org/schema/security" />
	<http pattern="/styles/**" security="none"
		xmlns="http://www.springframework.org/schema/security" />
	<http pattern="/scripts/**" security="none"
		xmlns="http://www.springframework.org/schema/security" />

	<http pattern="/oauth/token" 
	      create-session="stateless"
	      authentication-manager-ref="clientAuthenticationManager"
		  xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/oauth/(users|clients)/.*" 
		request-matcher="regex"
		create-session="stateless" 
		entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true" 
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="false" />
		<intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
			method="DELETE" />
		<intercept-url pattern="/oauth/users/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
			method="GET" />
		<intercept-url pattern="/oauth/clients/.*"
			access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
			method="GET" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<!-- The OAuth2 protected resources are separated out into their own block 
		so we can deal with authorization and error handling separately. This isn't 
		mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/me/**" 
		create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="true" />
		<intercept-url pattern="/me" access="ROLE_USER,SCOPE_READ" />
		<intercept-url pattern="/me/you" access="ROLE_CLIENT" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
	<http pattern="/api/rest/.*" 
		request-matcher="regex"
		create-session="ifRequired"
		entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true"
		xmlns="http://www.springframework.org/schema/security">
		<anonymous enabled="true" />
		
    	<intercept-url pattern="/api/rest/user/[0-9]+/message.*"  access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/> 
		<intercept-url pattern="/api/rest/user/avatar" access="hasRole('ROLE_USER')" method="POST"/>
		<intercept-url pattern="/api/rest/user" access="hasRole('ROLE_USER')"/>
    	<intercept-url pattern="/api/rest/user/.*" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/>
    	
    	<intercept-url pattern="/api/rest/travel.*" method="POST" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
    	
    	<intercept-url pattern="/api/rest/comment" method="POST" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />
    	<intercept-url pattern="/api/rest/comment/[0-9]+" method="DELETE" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')" />

    	<intercept-url pattern="/api/rest/index/photo/?" access="hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/>
    	<intercept-url pattern="/api/rest/index/.*" access="hasRole('ROLE_ADMIN')"/>
    	
    	<intercept-url pattern="/api/rest/photo/[0-9]+/comment/.*" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/>
    	<intercept-url pattern="/api/rest/photo/.*" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/>
    	
    	<intercept-url pattern="/api/rest/gps.*" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_ANONYMOUS') or hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')"/>
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>
	
	<http pattern="/services/api/**" 
		create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/services/api/photos" access="ROLE_USER,SCOPE_READ" />
		<custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/oauth/**" 
	    access-denied-page="/login.jsp?authorization_error=true"
		disable-url-rewriting="true" 
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/**" access="ROLE_USER,ROLE_ADMIN" />
		<form-login login-page="/login.jsp" default-target-url="/"
			authentication-failure-url="/login.jsp?error=true"
			login-processing-url="/j_security_check" />
		<logout logout-success-url="/" logout-url="/logout.do" />
		<remember-me user-service-ref="userloginDao"
			key="e37f4b31-0c45-11dd-bd0b-0800200c9a66" />
		<anonymous />
	</http>
				 
	<bean id="authenticationEntryPoint"
  		class="com.cnpanoramio.webapp.spring.AjaxAwareAuthenticationEntryPoint">
		<constructor-arg name="loginUrl" value="/login"/>
	</bean>
	
	<http xmlns="http://www.springframework.org/schema/security"
	      entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/*" access="ROLE_ANONYMOUS,ROLE_ADMIN,ROLE_USER" />
		<custom-filter before="FORM_LOGIN_FILTER" ref="authenticationFilter"/>
		<form-login login-page="/login.jsp" default-target-url="/#/maps"
			authentication-failure-url="/login.jsp?error=true"
			login-processing-url="/j_security_check" />
		<logout logout-success-url="/" logout-url="/logout.do" />
		<remember-me user-service-ref="userloginDao"
			key="e37f4b31-0c45-11dd-bd0b-0800200c9a66" />
	</http>
	
	<bean id="authenticationFilter"
	      class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
	    <property name="filterProcessesUrl" value="/login/j_spring_security_check" />
	    <property name="authenticationManager" ref="authenticationManager" />
	    <property name="authenticationSuccessHandler">
	        <bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
	            <property name="useReferer" value="true"/>
	        </bean>
	    </property>
	    <property name="authenticationFailureHandler">
	        <bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
	            <property name="defaultFailureUrl" value="/login?login_error=t" />
	        </bean>
	    </property>
	</bean>

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2" />
	</bean>
	
	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="sparklr2/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<!-- <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security"> 
		<authentication-provider> <user-service id="userDetailsService"> <user name="marissa" 
		password="koala" authorities="ROLE_USER" /> <user name="paul" password="emu" 
		authorities="ROLE_USER" /> </user-service> </authentication-provider> </authentication-manager> -->

	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<!-- <authentication-provider ref="userDetailsService" /> -->
		<authentication-provider user-service-ref="userloginDao">
			<password-encoder ref="passwordEncoder">
				<salt-source ref="saltSource" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

	<bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource"
		p:userPropertyToUse="username" />

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<!-- <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore"> 
		<constructor-arg index="0" ref="dataSource" /> </bean> -->

	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<!-- <property name="tokenEnhancer" ref="tokenEnhancer" /> -->
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<!-- <bean id="tokenEnhancer" class="org.springframework.security.oauth.examples.sparklr.oauth.SparklrTokenEnhancer" 
		/> -->

	<!-- <bean id="requestFactory" class="org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory"> 
		<constructor-arg name="clientDetailsService" ref="clientDetails" /> </bean> -->

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">
		<!-- <property name="approvalStore" ref="approvalStore" /> <property name="clientDetailsService" 
			ref="clientDetails" /> <property name="requestFactory" ref="requestFactory" 
			/> -->
	</bean>

	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		resource-id="sparklr" token-services-ref="tokenServices" />

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="my-trusted-client"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"
			access-token-validity="6000" />
        <oauth:client client-id="ponmap-android-client"
                      authorized-grant-types="password,refresh_token,client_credentials"
                      secret="92jasdjf8923oda"
                      authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"
                      scope="read,write,trust"
                      access-token-validity="6000" />
		<oauth:client client-id="my-trusted-client-with-secret"
			authorized-grant-types="password,authorization_code,refresh_token,implicit"
			secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
		<oauth:client client-id="my-client-with-secret"
			authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
			scope="read" secret="secret" />
		<oauth:client client-id="my-less-trusted-client"
			authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />
		<oauth:client client-id="my-less-trusted-autoapprove-client"
			authorized-grant-types="implicit" authorities="ROLE_CLIENT" scope="read,write,trust" />
		<oauth:client client-id="my-client-with-registered-redirect"
			authorized-grant-types="authorization_code,client_credentials"
			authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value"
			scope="read,trust" />
		<oauth:client client-id="my-untrusted-client-with-registered-redirect"
			authorized-grant-types="authorization_code" authorities="ROLE_CLIENT"
			redirect-uri="http://localhost" scope="read" />
		<oauth:client client-id="tonr" resource-ids="sparklr"
			authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT"
			scope="read,write" secret="secret" />
		<oauth:client client-id="tonr-with-redirect"
			resource-ids="sparklr" authorized-grant-types="authorization_code,implicit"
			authorities="ROLE_CLIENT" scope="read,write" secret="secret"
			redirect-uri="${tonr.redirect:http://localhost:8080/tonr2/sparklr/redirect}" />
	</oauth:client-details-service>

	<!-- <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true"> 
		<sec:expression-handler ref="oauthExpressionHandler" /> </sec:global-method-security> -->

	<oauth:expression-handler id="oauthExpressionHandler" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<bean class="com.cnpanoramio.webapp.listener.AuthenticationListener" />
		
</beans>
